#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
PLUGIN_BASE_PATH="$PLUGIN_PATH"
if [[ -n $DOKKU_API_VERSION ]]; then
  PLUGIN_BASE_PATH="$PLUGIN_ENABLED_PATH"
fi
source "$PLUGIN_BASE_PATH/common/functions"
# source "$PLUGIN_BASE_PATH/config/functions"
# source "$PLUGIN_BASE_PATH/domains/functions"
# source "$PLUGIN_BASE_PATH/nginx-vhost/functions"
source "$(dirname "$0")/config"
BINARY_PATH="$(dirname "$0")/dokku-cloudflare"

set_token() {
  local TOKEN=$1
  [[ ! -n "$TOKEN" ]] && dokku_log_fail "TOKEN must not be null"
  dokku config:set --global CLOUDFLARE_TOKEN=$TOKEN
}

set_email() {
  local EMAIL=$1
  [[ ! -n "$EMAIL" ]] && dokku_log_fail "EMAIL must not be null"
  dokku config:set --global CLOUDFLARE_EMAIL=$EMAIL
}

set_zone() {
  local ZONE=$1
  [[ ! -n "$ZONE" ]] && dokku_log_fail "ZONE must not be null"
  dokku config:set --global CLOUDFLARE_ZONE=$ZONE
}

create_subdomain_record() {
  source "$DOKKU_ROOT/ENV"

  [[ "$CLOUDFLARE_ZONE" == "!notset" ]] && dokku_log_fail "A ZONE must be set before using this plugin"
  [[ "$CLOUDFLARE_EMAIL" == "!notset" ]] && dokku_log_fail "A EMAIL must be set before using this plugin"
  [[ "$CLOUDFLARE_TOKEN" == "!notset" ]] && dokku_log_fail "A TOKEN must be set before using this plugin"
  local APP=$1
  verify_app_name $APP
  dokku_log_info1 "Checking if app vhost enabled for $APP"
  [[ "$(is_app_vhost_enabled $APP)" == "false" ]] && return 0

  for domain in $(get_app_domains $APP | xargs); do
    dokku_log_info2 "attempting to create entry for $domain"
    $BINARY_PATH add -d $domain

  dokku_log_info2 ""
    dokku_log_info2 "... done." # TODO: parse the result and indicate success/failure
  done
}

list_records_for_zone() {
  curl https://www.cloudflare.com/api_json.html \
    -d 'a=rec_load_all' \
    -d "tkn=$CLOUDFLARE_TOKEN" \
    -d "email=$CLOUDFLARE_EMAIL" \
    -d "z=$CLOUDFLARE_ZONE"
}

update_subdomain_record() {
    # TODO: impl ........
    curl https://www.cloudflare.com/api_json.html \
    -d 'a=rec_edit' \
    -d "tkn=$CLOUDFLARE_TOKEN" \
    -d "email=$CLOUDFLARE_EMAIL" \
    -d "z=$CLOUDFLARE_ZONE" \
    -d "id=$record_id"
    -d 'type=A' \
    -d "name=$domain" \
    -d "content=$PUBLIC_IP" \
    -d 'ttl=1'
}

# Functions pulled from master of dokku, missing from 3.26

get_app_domains() {
  local APP=$1; local APP_VHOST_FILE="$DOKKU_ROOT/$APP/VHOST"
  verify_app_name $APP
  if [[ -f "$APP_VHOST_FILE" ]];then
    cat "$APP_VHOST_FILE"
  fi
}
is_app_vhost_enabled() {
  local APP=$1; local APP_VHOST_FILE="$DOKKU_ROOT/$APP/VHOST"
  verify_app_name $APP

  local APP_VHOST_ENABLED=true

  if [[ -f "$DOKKU_ROOT/$APP/nginx.conf" ]] && [[ ! -f "$APP_VHOST_FILE" ]] && [[ "$NO_VHOST" != "0" ]]; then
    local APP_VHOST_ENABLED=false
  fi

  echo $APP_VHOST_ENABLED
}
