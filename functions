#!/usr/bin/env bash
# set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname "$0")/config"
# source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
# source "$PLUGIN_AVAILABLE_PATH/config/functions"
# source "$PLUGIN_AVAILABLE_PATH/domains/functions"
# source "$PLUGIN_AVAILABLE_PATH/nginx-vhost/functions"

create_subdomain_record() {
# validate a tkn and email are set
# check for app name provided first
# check vhost is enabled
# get zone name .. or check its an env var
# get published ip
local PUBLIC_IP=`curl http://icanhazip.com`
local domain=$1

# iterate domains with vhost as param
#for domain in $(echo $NONSSL_VHOSTS| xargs); do
          #dokku_log_info2 "$domain"
        #done

curl https://www.cloudflare.com/api_json.html \
  -d 'a=rec_new' \
  -d "tkn=$CLOUDFLARE_TOKEN" \
  -d "email=$CLOUDFLARE_EMAIL" \
  -d "z=$CLOUDFLARE_ZONE" \
  -d 'type=A' \
  -d "name=$domain" \
  -d "content=$PUBLIC_IP" \
  -d 'ttl=1'
}

list_records_for_zone() {
  curl https://www.cloudflare.com/api_json.html \
    -d 'a=rec_load_all' \
    -d "tkn=$CLOUDFLARE_TOKEN" \
    -d "email=$CLOUDFLARE_EMAIL" \
    -d "z=$CLOUDFLARE_ZONE"

}

update_subdomain_record() {
# validate a tkn and email are set
# check for app name provided first
# check vhost is enabled
# get zone name .. or check its an env var
# get published ip
  local PUBLIC_IP=`curl http://icanhazip.com`
  local domain=$1
  # local record_id= ... source from the full zone list method, somehow

# iterate domains with vhost as param
#for domain in $(echo $NONSSL_VHOSTS| xargs); do
#dokku_log_info2 "$domain"
#done
  curl https://www.cloudflare.com/api_json.html \
    -d 'a=rec_edit' \
    -d "tkn=$CLOUDFLARE_TOKEN" \
    -d "email=$CLOUDFLARE_EMAIL" \
    -d "z=$CLOUDFLARE_ZONE" \
    -d "id=$record_id"
    -d 'type=A' \
    -d "name=$domain" \
    -d "content=$PUBLIC_IP" \
    -d 'ttl=1'
}
